(()=>{"use strict";var e={799:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.setBadgeText=function(e){const r=e?"ON":"OFF";chrome.action.setBadgeText({text:r})}}},r={};function t(o){var s=r[o];if(void 0!==s)return s.exports;var n=r[o]={exports:{}};return e[o](n,n.exports,t),n.exports}(0,t(799).setBadgeText)(!0),chrome.runtime.onMessage.addListener(((e,r,t)=>{if("generate_password"===e.action)return fetch("http://localhost:8000/password/generate",{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>e.json())).then((e=>{e.password?t({password:e.password}):t({error:"Failed to generate password"})})).catch((e=>{console.error("Error generating password:",e),t({error:"Failed to contact backend"})})),!0;if("login"===e.action){const r=new URLSearchParams;return r.append("username",e.email),r.append("password",e.masterPassword),fetch("http://localhost:8000/auth/login",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:r.toString()}).then((e=>e.json())).then((e=>{if(e.access_token){const r=e.expires_in||3600;chrome.storage.local.set({authData:{token:e.access_token,expires:Date.now()+1e3*r,refreshToken:e.refresh_token||null}},(()=>{console.log("Token stored successfully.")})),t({success:!0,token:e.access_token})}else t({success:!1,error:e.detail||"Login failed"})})).catch((e=>{console.error("Login error:",e),t({success:!1,error:"Failed to contact backend"})})),!0}if("saveCredentials"===e.action){const r=e.data;return function(e={}){const{autoRefresh:r=!1,retryCount:t=0,retryDelay:o=500}=e;let s=0;const n=()=>new Promise(((e,t)=>{chrome.storage.local.get(["authData"],(o=>{if(chrome.runtime.lastError)return console.error("Chrome runtime error:",chrome.runtime.lastError.message),void t(new Error(chrome.runtime.lastError.message));if(!o||"object"!=typeof o)return void t(new Error("Invalid storage data format"));const s=o.authData;s?s.token&&"string"==typeof s.token?s.expires&&"number"==typeof s.expires&&Date.now()>s.expires?r&&"string"==typeof s.refreshToken?(console.log("Token expired, attempting refresh"),t(new Error("Token expired - refresh not implemented"))):t(new Error("Authentication token has expired")):e(s.token):t(new Error("No valid authentication token found")):t(new Error("No authentication data found"))}))})).catch((e=>{if(s++,s<=t)return console.log(`Retry attempt ${s}/${t} after error: ${e.message}`),new Promise((e=>setTimeout(e,o))).then(n);throw e}));return n()}().then((e=>fetch("http://localhost:8000/vault/passwords",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer "+e},body:JSON.stringify(r)}))).then((e=>{if(!e.ok&&200!==e.status)throw new Error(`Server returned ${e.status}: ${e.statusText}`);return e.json()})).then((e=>{"Password already saved!"===e.message?t({success:!0,message:"Password already saved!"}):t({success:!0,message:"Credentials saved successfully"})})).catch((e=>{console.error("Error saving credentials:",e),t({success:!1,message:"Failed to save credentials"})})),!0}}))})();
//# sourceMappingURL=background.js.map