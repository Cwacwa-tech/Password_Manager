{"version":3,"file":"content.js","mappings":"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","sources":["webpack://browser-extension/./src/content.ts"],"sourcesContent":["// Function to log form detection\nfunction logFormDetection(formType: string): void {\n    console.log(`${formType} form detected!!!`);\n}\n\n// Function to check if an element is a login form with improved accuracy\nfunction isLoginForm(elem: HTMLElement): boolean {\n    // Check for password field - essential for login forms\n    const hasPassword = elem.querySelector('input[type=\"password\"], input[name*=\"pass\"], input[id*=\"pass\"]');\n    if (!hasPassword) return false;\n    \n    // Expanded check for username/user ID/email fields with more variations\n    const userIdentifierSelectors = [\n        // Username selectors\n        'input[type=\"text\"][name*=\"user\" i]', 'input[id*=\"user\" i]', 'input[placeholder*=\"user\" i]',\n        // User ID selectors\n        'input[type=\"text\"][name*=\"userid\" i]', 'input[id*=\"userid\" i]', 'input[placeholder*=\"userid\" i]',\n        'input[type=\"text\"][name*=\"user_id\" i]', 'input[id*=\"user_id\" i]', 'input[placeholder*=\"user_id\" i]',\n        'input[type=\"text\"][name*=\"user-id\" i]', 'input[id*=\"user-id\" i]', 'input[placeholder*=\"user-id\" i]',\n        'input[type=\"text\"][name*=\"id\" i]', 'input[id*=\"id\" i]', 'input[placeholder*=\"id\" i]',\n        // Account selectors\n        'input[type=\"text\"][name*=\"account\" i]', 'input[id*=\"account\" i]', 'input[placeholder*=\"account\" i]',\n        // Login selectors\n        'input[type=\"text\"][name*=\"login\" i]', 'input[id*=\"login\" i]', 'input[placeholder*=\"login\" i]',\n        // Email selectors\n        'input[type=\"email\"]', 'input[name*=\"email\" i]', 'input[id*=\"email\" i]', 'input[placeholder*=\"email\" i]'\n    ];\n    \n    // Check for any user identifier field\n    const hasUserIdentifier = userIdentifierSelectors.some(selector => elem.querySelector(selector) !== null);\n    \n    // Check for labels that might indicate user ID fields\n    const hasUserIdLabel = Array.from(elem.querySelectorAll('label')).some(label => {\n        const labelText = label.textContent?.toLowerCase().trim() || '';\n        return labelText.includes('user id') || \n               labelText.includes('userid') || \n               labelText.includes('user-id') || \n               labelText.includes('user_id') || \n               labelText.includes('id') || \n               labelText === 'id';\n    });\n    \n    // Check for login-specific buttons or text indicating this is a login (not signup) form\n    const loginButtonTexts = [\"log in\", \"sign in\", \"login\", \"signin\", \"authenticate\", \"continue\", \"submit\", \"go\"];\n    const signupButtonTexts = [\"sign up\", \"signup\", \"register\", \"create account\", \"join now\", \"get started\"];\n    \n    // Find all buttons and submit inputs\n    const buttons = Array.from(elem.querySelectorAll('button, input[type=\"submit\"], a.btn, a[role=\"button\"]'));\n    \n    // Check if there are login buttons\n    const hasLoginButton = buttons.some((button) => {\n        const buttonText = button.textContent?.toLowerCase().trim() || '';\n        const buttonValue = (button as HTMLInputElement).value?.toLowerCase().trim() || '';\n        const buttonId = button.id?.toLowerCase() || '';\n        const buttonClass = button.className?.toLowerCase() || '';\n        \n        return loginButtonTexts.some(text => \n            buttonText.includes(text) || \n            buttonValue.includes(text) || \n            buttonId.includes(text) || \n            buttonClass.includes(text)\n        );\n    });\n    \n    // Check if this is actually a signup form (to exclude it)\n    const isSignupForm = buttons.some((button) => {\n        const buttonText = button.textContent?.toLowerCase().trim() || '';\n        const buttonValue = (button as HTMLInputElement).value?.toLowerCase().trim() || '';\n        return signupButtonTexts.some(text => buttonText.includes(text) || buttonValue.includes(text));\n    });\n    \n    // Check for signup-related fields\n    const hasSignupFields = \n        elem.querySelector('input[name*=\"confirm\" i]') !== null || // Confirm password\n        elem.querySelector('input[placeholder*=\"confirm\" i]') !== null ||\n        elem.querySelector('input[name*=\"signup\" i]') !== null ||\n        elem.querySelector('input[name*=\"sign-up\" i]') !== null;\n    \n    // Check for search-related attributes to exclude search bars\n    const isSearchForm = \n        elem.getAttribute('role') === 'search' || \n        elem.id?.toLowerCase().includes('search') || \n        elem.className?.toLowerCase().includes('search') ||\n        elem.querySelector('input[type=\"search\"]') !== null ||\n        elem.querySelector('input[name*=\"search\" i]') !== null ||\n        elem.querySelector('input[placeholder*=\"search\" i]') !== null;\n    \n    // Additional check for form action or ID that contains login-related terms\n    const formAction = elem.getAttribute('action')?.toLowerCase() || '';\n    const formId = elem.id?.toLowerCase() || '';\n    const formClass = elem.className?.toLowerCase() || '';\n    const formMethod = elem.getAttribute('method')?.toLowerCase() || '';\n    \n    const hasLoginIdentifier = \n        formAction.includes('login') || \n        formAction.includes('signin') || \n        formAction.includes('auth') ||\n        formId.includes('login') || \n        formId.includes('signin') ||\n        formId.includes('auth') ||\n        formClass.includes('login') ||\n        formClass.includes('signin') ||\n        formClass.includes('auth');\n        \n    // Check if the form has a title or legend indicating login\n    const hasLoginTitle = Array.from(elem.querySelectorAll('h1, h2, h3, h4, h5, h6, legend')).some(heading => {\n        const headingText = heading.textContent?.toLowerCase().trim() || '';\n        return headingText.includes('login') || \n               headingText.includes('sign in') || \n               headingText.includes('log in') ||\n               headingText.includes('authenticate');\n    });\n    \n    // If it has login indicators and is not a signup form or search form\n    return (hasPassword && \n           (hasUserIdentifier || hasUserIdLabel || hasLoginButton || hasLoginIdentifier || hasLoginTitle) && \n           !isSignupForm && \n           !hasSignupFields && \n           !isSearchForm);\n}\n\n// NEW FUNCTION: Check if an element is a signup form\nfunction isSignupForm(elem: HTMLElement): boolean {\n    // Check for password field - essential for signup forms\n    const hasPassword = elem.querySelector('input[type=\"password\"], input[name*=\"pass\"], input[id*=\"pass\"]');\n    if (!hasPassword) return false;\n    \n    // Check for signup-specific buttons or text\n    const signupButtonTexts = [\"sign up\", \"signup\", \"register\", \"create account\", \"join now\", \"get started\", \"create\"];\n    \n    // Find all buttons and submit inputs\n    const buttons = Array.from(elem.querySelectorAll('button, input[type=\"submit\"], a.btn, a[role=\"button\"]'));\n    \n    // Check if there are signup buttons\n    const hasSignupButton = buttons.some((button) => {\n        const buttonText = button.textContent?.toLowerCase().trim() || '';\n        const buttonValue = (button as HTMLInputElement).value?.toLowerCase().trim() || '';\n        const buttonId = button.id?.toLowerCase() || '';\n        const buttonClass = button.className?.toLowerCase() || '';\n        \n        return signupButtonTexts.some(text => \n            buttonText.includes(text) || \n            buttonValue.includes(text) || \n            buttonId.includes(text) || \n            buttonClass.includes(text)\n        );\n    });\n    \n    // Check for signup-related fields\n    const hasSignupFields = \n        elem.querySelector('input[name*=\"confirm\" i]') !== null || // Confirm password\n        elem.querySelector('input[placeholder*=\"confirm\" i]') !== null ||\n        elem.querySelector('input[name*=\"signup\" i]') !== null ||\n        elem.querySelector('input[name*=\"sign-up\" i]') !== null ||\n        elem.querySelector('input[name*=\"register\" i]') !== null;\n    \n    // Check for search-related attributes to exclude search bars\n    const isSearchForm = \n        elem.getAttribute('role') === 'search' || \n        elem.id?.toLowerCase().includes('search') || \n        elem.className?.toLowerCase().includes('search') ||\n        elem.querySelector('input[type=\"search\"]') !== null ||\n        elem.querySelector('input[name*=\"search\" i]') !== null ||\n        elem.querySelector('input[placeholder*=\"search\" i]') !== null;\n    \n    // Additional check for form action or ID that contains signup-related terms\n    const formAction = elem.getAttribute('action')?.toLowerCase() || '';\n    const formId = elem.id?.toLowerCase() || '';\n    const formClass = elem.className?.toLowerCase() || '';\n    \n    const hasSignupIdentifier = \n        formAction.includes('signup') || \n        formAction.includes('register') || \n        formAction.includes('create') ||\n        formId.includes('signup') || \n        formId.includes('register') ||\n        formId.includes('create') ||\n        formClass.includes('signup') ||\n        formClass.includes('register') ||\n        formClass.includes('create');\n        \n    // Check if the form has a title or legend indicating signup\n    const hasSignupTitle = Array.from(elem.querySelectorAll('h1, h2, h3, h4, h5, h6, legend')).some(heading => {\n        const headingText = heading.textContent?.toLowerCase().trim() || '';\n        return headingText.includes('sign up') || \n               headingText.includes('signup') || \n               headingText.includes('register') ||\n               headingText.includes('create account') ||\n               headingText.includes('join');\n    });\n    \n    // If it has signup indicators and is not a search form\n    return (hasPassword && \n           (hasSignupButton || hasSignupFields || hasSignupIdentifier || hasSignupTitle) && \n           !isSearchForm);\n}\n\n// Function to fill login form inputs with \"LOVE\"\nfunction fillFormInputs(elem: HTMLElement) {\n    // Fill password field\n    const passwordInput = elem.querySelector('input[type=\"password\"]') as HTMLInputElement;\n    if (passwordInput && !passwordInput.dataset.filled) {\n        simulateUserInput(passwordInput, \"LOVE\");\n        passwordInput.dataset.filled = \"true\";\n        console.debug(\"Filled password input with 'LOVE':\", passwordInput);\n    }\n\n    // Define all the selectors for user identifier fields\n    const userIdentifierSelectors = [\n        // Username selectors\n        'input[type=\"text\"][name*=\"user\" i]', 'input[id*=\"user\" i]', 'input[placeholder*=\"user\" i]',\n        // User ID selectors\n        'input[type=\"text\"][name*=\"userid\" i]', 'input[id*=\"userid\" i]', 'input[placeholder*=\"userid\" i]',\n        'input[type=\"text\"][name*=\"user_id\" i]', 'input[id*=\"user_id\" i]', 'input[placeholder*=\"user_id\" i]',\n        'input[type=\"text\"][name*=\"user-id\" i]', 'input[id*=\"user-id\" i]', 'input[placeholder*=\"user-id\" i]',\n        'input[type=\"text\"][name*=\"id\" i]', 'input[id*=\"id\" i]', 'input[placeholder*=\"id\" i]',\n        // Account selectors\n        'input[type=\"text\"][name*=\"account\" i]', 'input[id*=\"account\" i]', 'input[placeholder*=\"account\" i]',\n        // Login selectors\n        'input[type=\"text\"][name*=\"login\" i]', 'input[id*=\"login\" i]', 'input[placeholder*=\"login\" i]',\n        // Email selectors\n        'input[type=\"email\"]', 'input[name*=\"email\" i]', 'input[id*=\"email\" i]', 'input[placeholder*=\"email\" i]',\n        // Generic text inputs that might be user identifiers\n        'input[type=\"text\"]'\n    ];\n    \n    // Try each selector until we find a field to fill\n    let userIdFilled = false;\n    \n    for (const selector of userIdentifierSelectors) {\n        const inputs = elem.querySelectorAll(selector);\n        \n        for (const input of Array.from(inputs) as HTMLInputElement[]) {\n            // Skip inputs that are already filled or are likely search or hidden fields\n            if (input.dataset.filled || \n                input.type === 'hidden' || \n                input.name?.toLowerCase().includes('search') || \n                input.id?.toLowerCase().includes('search') ||\n                input.placeholder?.toLowerCase().includes('search')) {\n                continue;\n            }\n            \n            // Fill the field\n            simulateUserInput(input, \"LOVE\");\n            input.dataset.filled = \"true\";\n            console.debug(`Filled ${input.name || input.id || 'user identifier'} input with 'LOVE':`, input);\n            userIdFilled = true;\n            break;\n        }\n        \n        if (userIdFilled) break;\n    }\n    \n    // If we still haven't found a field to fill, look for text inputs that might be near labels with \"user id\" text\n    if (!userIdFilled) {\n        const labels = elem.querySelectorAll('label');\n        \n        for (const label of Array.from(labels)) {\n            const labelText = label.textContent?.toLowerCase().trim() || '';\n            \n            if (labelText.includes('user') || labelText.includes('id') || labelText.includes('email') || \n                labelText.includes('login') || labelText.includes('account')) {\n                \n                // Try to find the input this label is for\n                let input: HTMLInputElement | null = null;\n                \n                if (label.htmlFor) {\n                    // If the label has a \"for\" attribute\n                    input = document.getElementById(label.htmlFor) as HTMLInputElement;\n                } else {\n                    // Or if the input is a child of the label\n                    input = label.querySelector('input[type=\"text\"], input[type=\"email\"]') as HTMLInputElement;\n                }\n                \n                if (input && !input.dataset.filled) {\n                    simulateUserInput(input, \"LOVE\");\n                    input.dataset.filled = \"true\";\n                    console.debug(`Filled labeled input (${labelText}) with 'LOVE':`, input);\n                    userIdFilled = true;\n                    break;\n                }\n            }\n        }\n    }\n    \n    // Last resort: If we found a password field but no username/ID field, look for the first text input\n    if (!userIdFilled && passwordInput) {\n        const firstTextInput = elem.querySelector('input[type=\"text\"]:not([data-filled])') as HTMLInputElement;\n        if (firstTextInput) {\n            simulateUserInput(firstTextInput, \"LOVE\");\n            firstTextInput.dataset.filled = \"true\";\n            console.debug(\"Filled first text input with 'LOVE':\", firstTextInput);\n        }\n    }\n}\n\n// Function to simulate user input, ensuring frameworks (React, Vue) detect changes\nfunction simulateUserInput(input: HTMLInputElement, value: string) {\n    // Skip if input is disabled or readonly\n    if (input.disabled || input.readOnly) return;\n    \n    const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, \"value\")?.set;\n    if (nativeInputValueSetter) {\n        nativeInputValueSetter.call(input, value); // Set input value programmatically\n    } else {\n        // Fallback if the setter is not available\n        input.value = value;\n    }\n\n    // Dispatch multiple events for maximum compatibility with different frameworks\n    const events = ['input', 'change', 'keydown', 'keyup'];\n    \n    events.forEach(eventType => {\n        let event;\n        if (eventType === 'keydown' || eventType === 'keyup') {\n            // For key events, create a KeyboardEvent\n            event = new KeyboardEvent(eventType, {\n                bubbles: true,\n                cancelable: true,\n                key: 'L' // First letter of \"LOVE\"\n            });\n        } else {\n            // For other events, use regular Event\n            event = new Event(eventType, { bubbles: true });\n        }\n        input.dispatchEvent(event);\n    });\n    \n    // Some frameworks might use focus/blur events as well\n    input.focus();\n    setTimeout(() => {\n        input.blur();\n    }, 100);\n}\n\n//Create confirmation popup\nfunction showConfirmationPopup(form: HTMLElement, callback: (confirmed: boolean) => void) {\n    // Get credentials first so we can display them\n    const credentials = collectCredentials(form);\n    \n    // Create popup container\n    const popup = document.createElement('div');\n    popup.style.position = 'fixed';\n    popup.style.top = '50%';\n    popup.style.left = '50%';\n    popup.style.transform = 'translate(-50%, -50%)';\n    popup.style.backgroundColor = 'white';\n    popup.style.padding = '20px';\n    popup.style.borderRadius = '5px';\n    popup.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.3)';\n    popup.style.zIndex = '9999';\n    popup.style.display = 'flex';\n    popup.style.flexDirection = 'column';\n    popup.style.alignItems = 'center';\n    popup.style.minWidth = '300px';\n    \n    // Create title\n    const title = document.createElement('h3');\n    title.textContent = 'Save Credentials?';\n    title.style.marginBottom = '15px';\n    title.style.fontSize = '18px';\n    title.style.fontWeight = 'bold';\n    popup.appendChild(title);\n    \n    // Create credentials display container\n    const credentialsContainer = document.createElement('div');\n    credentialsContainer.style.width = '100%';\n    credentialsContainer.style.marginBottom = '20px';\n    credentialsContainer.style.padding = '10px';\n    credentialsContainer.style.backgroundColor = '#f5f5f5';\n    credentialsContainer.style.borderRadius = '4px';\n    credentialsContainer.style.border = '1px solid #ddd';\n    popup.appendChild(credentialsContainer);\n    \n    // Website/domain\n    const siteInfo = document.createElement('div');\n    siteInfo.style.marginBottom = '8px';\n    siteInfo.style.fontSize = '14px';\n    siteInfo.innerHTML = `<strong>Site:</strong> ${credentials.site}`;\n    credentialsContainer.appendChild(siteInfo);\n    \n    // Username/email\n    const usernameInfo = document.createElement('div');\n    usernameInfo.style.marginBottom = '8px';\n    usernameInfo.style.fontSize = '14px';\n    usernameInfo.innerHTML = `<strong>Username:</strong> ${credentials.username || '[empty]'}`;\n    credentialsContainer.appendChild(usernameInfo);\n    \n    // Password (masked)\n    const passwordInfo = document.createElement('div');\n    passwordInfo.style.fontSize = '14px';\n    passwordInfo.innerHTML = `<strong>Password:</strong> ${'•'.repeat(Math.min(credentials.password.length, 8))}`;\n    credentialsContainer.appendChild(passwordInfo);\n    \n    // Create button container\n    const buttonContainer = document.createElement('div');\n    buttonContainer.style.display = 'flex';\n    buttonContainer.style.gap = '10px';\n    popup.appendChild(buttonContainer);\n    \n    // Create status message area (initially hidden)\n    const statusMessage = document.createElement('div');\n    statusMessage.style.marginTop = '10px';\n    statusMessage.style.padding = '5px';\n    statusMessage.style.borderRadius = '4px';\n    statusMessage.style.fontSize = '14px';\n    statusMessage.style.textAlign = 'center';\n    statusMessage.style.display = 'none';  // Initially hidden\n    popup.appendChild(statusMessage);\n    \n    // Create Yes button\n    const yesButton = document.createElement('button');\n    yesButton.textContent = 'Yes';\n    yesButton.style.padding = '8px 16px';\n    yesButton.style.backgroundColor = '#4CAF50';\n    yesButton.style.border = '2px solid #000000'; // Adding a black border\n    yesButton.style.borderRadius = '4px';\n    yesButton.style.color = 'white';\n    yesButton.style.cursor = 'pointer';\n    yesButton.style.transition = 'all 0.2s ease'; // Smooth transition for effects\n    buttonContainer.appendChild(yesButton);\n    \n    // Create No button\n    const noButton = document.createElement('button');\n    noButton.textContent = 'No';\n    noButton.style.padding = '8px 16px';\n    noButton.style.backgroundColor = '#f44336';\n    noButton.style.border = '2px solid #000000'; // Adding a black border\n    noButton.style.borderRadius = '4px';\n    noButton.style.color = 'white';\n    noButton.style.cursor = 'pointer';\n    noButton.style.transition = 'all 0.2s ease'; // Smooth transition for effects\n    buttonContainer.appendChild(noButton);\n    \n    // Add visual feedback for button clicks\n    yesButton.addEventListener('mousedown', () => {\n        yesButton.style.backgroundColor = '#3B8C3E'; // Darker green when clicked\n        yesButton.style.transform = 'scale(0.95)'; // Slight shrink effect\n    });\n    \n    noButton.addEventListener('mousedown', () => {\n        noButton.style.backgroundColor = '#D32F2F'; // Darker red when clicked\n        noButton.style.transform = 'scale(0.95)'; // Slight shrink effect\n    });\n    \n    // Add hover effects for better UX\n    yesButton.addEventListener('mouseover', () => {\n        yesButton.style.backgroundColor = '#45A049';\n    });\n    \n    yesButton.addEventListener('mouseout', () => {\n        yesButton.style.backgroundColor = '#4CAF50';\n        yesButton.style.transform = 'scale(1)'; // Reset any transform\n    });\n    \n    noButton.addEventListener('mouseover', () => {\n        noButton.style.backgroundColor = '#E53935';\n    });\n    \n    noButton.addEventListener('mouseout', () => {\n        noButton.style.backgroundColor = '#f44336';\n        noButton.style.transform = 'scale(1)'; // Reset any transform\n    });\n    \n    // Handle Yes button click\n    yesButton.addEventListener('click', () => {\n        // Send to background script - we already collected the credentials\n        chrome.runtime.sendMessage({\n            action: 'saveCredentials',\n            data: credentials\n        }, (response) => {\n            console.log('Credentials saved status:', response);\n            \n            if (response.success) {\n                // Check if this was a duplicate\n                if (response.message === 'Password already saved!') {\n                    // Show duplicate message\n                    statusMessage.textContent = 'This password was already saved!';\n                    statusMessage.style.backgroundColor = '#FFF3CD';\n                    statusMessage.style.color = '#856404';\n                    statusMessage.style.border = '1px solid #FFEEBA';\n                    statusMessage.style.display = 'block';\n                    \n                    // Auto-close after 1.5 seconds\n                    setTimeout(() => {\n                        document.body.removeChild(popup);\n                        callback(true);\n                    }, 1500);\n                } else {\n                    // Success message\n                    statusMessage.textContent = 'Credentials saved successfully!';\n                    statusMessage.style.backgroundColor = '#D4EDDA';\n                    statusMessage.style.color = '#155724';\n                    statusMessage.style.border = '1px solid #C3E6CB';\n                    statusMessage.style.display = 'block';\n                    \n                    // Auto-close after 1.5 seconds\n                    setTimeout(() => {\n                        document.body.removeChild(popup);\n                        callback(true);\n                    }, 1500);\n                }\n            } else {\n                // Error message\n                statusMessage.textContent = 'Failed to save credentials.';\n                statusMessage.style.backgroundColor = '#F8D7DA';\n                statusMessage.style.color = '#721C24';\n                statusMessage.style.border = '1px solid #F5C6CB';\n                statusMessage.style.display = 'block';\n                \n                // Auto-close after 1.5 seconds\n                setTimeout(() => {\n                    document.body.removeChild(popup);\n                    callback(false);\n                }, 1500);\n            }\n        });\n    });\n    \n    noButton.addEventListener('click', () => {\n        document.body.removeChild(popup);\n        callback(false);\n    });\n    \n    // Add popup to page\n    document.body.appendChild(popup);\n}\n\n// Function to collect credentials from the form\nfunction collectCredentials(form: HTMLElement) {\n    // Get hostname for site identification\n    const site = window.location.hostname;\n    \n    // Find password field\n    const passwordInput = form.querySelector('input[type=\"password\"]') as HTMLInputElement;\n    const password = passwordInput ? passwordInput.value : '';\n    \n    // Find username/email field using similar logic to your existing code\n    let username = '';\n    const userIdentifierSelectors = [\n        'input[type=\"email\"]', \n        'input[name*=\"email\" i]', \n        'input[id*=\"email\" i]',\n        'input[type=\"text\"][name*=\"user\" i]', \n        'input[id*=\"user\" i]',\n        'input[name*=\"login\" i]', \n        'input[id*=\"login\" i]'\n        // Add other selectors as needed\n    ];\n    \n    for (const selector of userIdentifierSelectors) {\n        const input = form.querySelector(selector) as HTMLInputElement;\n        if (input && input.value) {\n            username = input.value;\n            break;\n        }\n    }\n    \n    return {\n        site,\n        username,\n        password,\n        timestamp: new Date().toISOString()\n    };\n}\n\n// Function to check if all required form inputs are filled\nfunction areAllRequiredInputsFilled(form: HTMLElement): boolean {\n    const requiredInputs = form.querySelectorAll('input[required], select[required], textarea[required]');\n    \n    // If there are no required inputs, check visible inputs instead\n    if (requiredInputs.length === 0) {\n        const visibleInputs = Array.from(form.querySelectorAll('input, select, textarea')).filter(input => {\n            // Cast the input to a union type\n            const element = input as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n            const style = window.getComputedStyle(element);\n            return style.display !== 'none' && \n                   style.visibility !== 'hidden' && \n                   element.type !== 'hidden' && \n                   element.type !== 'submit' && \n                   element.type !== 'button';\n        });\n        \n        return visibleInputs.every(element => {\n            // Ensure the element is of the correct type\n            if (isInputElement(element)) {\n                return element.value.trim() !== '';\n            }\n            return false;\n        });\n    }\n    \n    // Check if all required inputs are filled\n    return Array.from(requiredInputs).every(input => {\n        // Cast the input to a union type\n        const element = input as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n        if (isInputElement(element)) {\n            return element.value.trim() !== '';\n        }\n        return false;\n    });\n}\n\n// Type guard to check if an element is HTMLInputElement, HTMLSelectElement, or HTMLTextAreaElement\nfunction isInputElement(element: Element): element is HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement {\n    return element instanceof HTMLInputElement || \n           element instanceof HTMLSelectElement || \n           element instanceof HTMLTextAreaElement;\n}\n\n// Function to set up submit handlers for signup forms\nfunction setupSignupFormSubmitHandler(form: HTMLElement) {\n    // Flag to prevent multiple event handlers\n    if (form.dataset.submitHandlerAttached === 'true') {\n        return;\n    }\n    form.dataset.submitHandlerAttached = 'true';\n    \n    // Find all submit buttons and add click handlers\n    const submitButtons = form.querySelectorAll('button[type=\"submit\"], input[type=\"submit\"], button:not([type]), [role=\"button\"]');\n    \n    submitButtons.forEach(button => {\n        button.addEventListener('click', function(event) {\n            // Only intercept if all required fields are filled\n            if (areAllRequiredInputsFilled(form)) {\n                // Prevent default form submission\n                event.preventDefault();\n                event.stopPropagation();\n                \n                // Show confirmation popup\n                showConfirmationPopup(form,(confirmed) => {\n                    if (confirmed) {\n                        console.log(\"Password saved\");\n                    } else {\n                        console.log(\"Password not saved\");\n                    }\n                });\n            }\n        });\n    });\n    \n    // For extra reliability, also attach to form submit event\n    if (form.tagName === 'FORM') {\n        form.addEventListener('submit', function(event) {\n            // Only intercept if all required fields are filled\n            if (areAllRequiredInputsFilled(form)) {\n                // Prevent default form submission\n                event.preventDefault();\n                event.stopPropagation();\n                \n                // Show confirmation popup\n                showConfirmationPopup(form, (confirmed) => {\n                    if (confirmed) {\n                        console.log(\"Password saved\");\n                    } else {\n                        console.log(\"Password not saved\");\n                    }\n                });\n            }\n        });\n    }\n}\n\n// Function to detect and process forms in the DOM\nfunction detectForm(node: Node) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n        const elem = node as HTMLElement;\n        \n        // Check if element is a form\n        if (elem.tagName === 'FORM') {\n            if (isLoginForm(elem)) {\n                fillFormInputs(elem);\n                logFormDetection(\"Login form\");\n            } else if (isSignupForm(elem)) {\n                logFormDetection(\"Signup form\");\n                setupSignupFormSubmitHandler(elem);\n            }\n        } \n        // Also check for containers that might not use the form tag\n        else if (elem.querySelector('input[type=\"password\"]')) {\n            if (isLoginForm(elem)) {\n                fillFormInputs(elem);\n                logFormDetection(\"Login container\");\n            } else if (isSignupForm(elem)) {\n                logFormDetection(\"Signup container\");\n                setupSignupFormSubmitHandler(elem);\n            }\n        }\n    }\n}\n\n// Debounce function to limit rapid execution of MutationObserver callbacks\nfunction debounce(func: Function, delay: number) {\n    let timeout: ReturnType<typeof setTimeout>;\n    return (...args: any[]) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func(...args), delay);\n    };\n}\n\n// Create a MutationObserver to detect new forms dynamically added to the DOM\nconst observer = new MutationObserver(\n    debounce((mutations: MutationRecord[]) => {\n        mutations.forEach((mutation) => {\n            if (mutation.addedNodes.length > 0) {\n                mutation.addedNodes.forEach(detectForm); // Check newly added elements\n            } else if (mutation.target.nodeType === Node.ELEMENT_NODE) {\n                detectForm(mutation.target); // Check modified elements\n            }\n        });\n    }, 100) // Debounce delay of 100ms to optimize performance\n);\n\n// Function to start observing DOM changes\nfunction observe() {\n    observer.observe(document, {\n        attributes: true, // Watch for attribute changes that might reveal forms\n        attributeFilter: ['class', 'style', 'hidden'], // Only watch relevant attributes\n        characterData: false, // Ignore text changes\n        childList: true, // Watch for added/removed nodes\n        subtree: true, // Watch the entire DOM tree\n    });\n\n    // Process all potential forms when the script runs\n    document.querySelectorAll(\"form\").forEach(detectForm);\n    \n    // Also check for non-form containers\n    document.querySelectorAll(\"div, section, main, fieldset\").forEach(elem => {\n        if (elem.querySelector('input[type=\"password\"]')) {\n            detectForm(elem);\n        }\n    });\n}\n\n// Start monitoring the DOM for forms\nobserve();"],"names":["logFormDetection","formType","console","log","isLoginForm","elem","hasPassword","querySelector","hasUserIdentifier","some","selector","hasUserIdLabel","Array","from","querySelectorAll","label","labelText","textContent","toLowerCase","trim","includes","loginButtonTexts","signupButtonTexts","buttons","hasLoginButton","button","buttonText","buttonValue","value","buttonId","id","buttonClass","className","text","isSignupForm","hasSignupFields","isSearchForm","getAttribute","formAction","formId","formClass","hasLoginIdentifier","hasLoginTitle","heading","headingText","hasSignupButton","hasSignupIdentifier","hasSignupTitle","fillFormInputs","passwordInput","dataset","filled","simulateUserInput","debug","userIdentifierSelectors","userIdFilled","inputs","input","type","name","placeholder","labels","htmlFor","document","getElementById","firstTextInput","disabled","readOnly","nativeInputValueSetter","Object","getOwnPropertyDescriptor","window","HTMLInputElement","prototype","set","call","forEach","eventType","event","KeyboardEvent","bubbles","cancelable","key","Event","dispatchEvent","focus","setTimeout","blur","showConfirmationPopup","form","callback","credentials","site","location","hostname","password","username","timestamp","Date","toISOString","collectCredentials","popup","createElement","style","position","top","left","transform","backgroundColor","padding","borderRadius","boxShadow","zIndex","display","flexDirection","alignItems","minWidth","title","marginBottom","fontSize","fontWeight","appendChild","credentialsContainer","width","border","siteInfo","innerHTML","usernameInfo","passwordInfo","repeat","Math","min","length","buttonContainer","gap","statusMessage","marginTop","textAlign","yesButton","color","cursor","transition","noButton","addEventListener","chrome","runtime","sendMessage","action","data","response","success","message","body","removeChild","areAllRequiredInputsFilled","requiredInputs","filter","element","getComputedStyle","visibility","every","isInputElement","HTMLSelectElement","HTMLTextAreaElement","setupSignupFormSubmitHandler","submitHandlerAttached","preventDefault","stopPropagation","confirmed","tagName","detectForm","node","nodeType","Node","ELEMENT_NODE","MutationObserver","timeout","args","clearTimeout","mutations","mutation","addedNodes","target","func","debounce","observe","attributes","attributeFilter","characterData","childList","subtree"],"sourceRoot":""}