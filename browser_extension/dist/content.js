/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!************************!*\
  !*** ./src/content.ts ***!
  \************************/

const blurFilter = "blur(6px)";
let textToBlur = "";
// Search this DOM node for text to blur and blur the parent element if found.
function processNode(node) {
    if (node.childNodes.length > 0) {
        Array.from(node.childNodes).forEach(processNode);
    }
    if (node.nodeType === Node.TEXT_NODE &&
        node.textContent !== null && node.textContent.trim().length > 0) {
        const parent = node.parentElement;
        if (parent == null) {
            return;
        }
        const parentStyle = window.getComputedStyle(parent);
        if (parent.tagName === 'SCRIPT' || parent.style.filter === blurFilter) {
            // Already blurred
            return;
        }
        if (node.textContent.includes(textToBlur)) {
            blurElement(parent);
        }
    }
}
function blurElement(elem) {
    elem.style.filter = blurFilter;
    console.debug("blurred id:" + elem.id + " class:" + elem.className +
        " tag:" + elem.tagName + " text:" + elem.textContent);
}
// Create a MutationObserver to watch for changes to the DOM.
const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
        if (mutation.addedNodes.length > 0) {
            mutation.addedNodes.forEach(processNode);
        }
        else {
            processNode(mutation.target);
        }
    });
});
function observe() {
    // Only start observing the DOM if the extension is enabled and there is text to blur.
    if (textToBlur.trim().length > 0) {
        observer.observe(document, {
            attributes: false,
            characterData: true,
            childList: true,
            subtree: true,
        });
        // Loop through all elements on the page for initial processing.
        processNode(document);
    }
    else {
        observer.disconnect();
    }
}
chrome.storage.sync.get("item", (data) => {
    if (data.item) {
        textToBlur = data.item;
    }
    observe();
});
// Listen for messages from popup to update the text to blur.
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.item) {
        textToBlur = request.item;
        // Re-process the DOM with the new text to blur.
        processNode(document);
        sendResponse({ title: document.title, url: window.location.href });
    }
});

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNLFVBQVUsR0FBRyxXQUFXO0FBQzlCLElBQUksVUFBVSxHQUFHLEVBQUU7QUFFbkIsOEVBQThFO0FBQzlFLFNBQVMsV0FBVyxDQUFDLElBQVU7SUFDM0IsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUM3QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO0lBQ3BELENBQUM7SUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFNBQVM7UUFDaEMsSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWE7UUFDakMsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFLENBQUM7WUFDakIsT0FBTTtRQUNWLENBQUM7UUFDRCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEQsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxVQUFVLEVBQUUsQ0FBQztZQUNwRSxrQkFBa0I7WUFDbEIsT0FBTTtRQUNWLENBQUM7UUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDeEMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxJQUFpQjtJQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFVO0lBQzlCLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTO1FBQzlELE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzdELENBQUM7QUFFRCw2REFBNkQ7QUFDN0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO0lBQ2hELFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUMzQixJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ2pDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUM1QyxDQUFDO2FBQU0sQ0FBQztZQUNKLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQ2hDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFHRixTQUFTLE9BQU87SUFDWixzRkFBc0Y7SUFDdEYsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQy9CLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ3ZCLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLGFBQWEsRUFBRSxJQUFJO1lBQ25CLFNBQVMsRUFBRSxJQUFJO1lBQ2YsT0FBTyxFQUFFLElBQUk7U0FDaEIsQ0FBQztRQUNGLGdFQUFnRTtRQUNoRSxXQUFXLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7U0FDSSxDQUFDO1FBQ0YsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzFCLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO0lBQ3JDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1osVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQUM7QUFFSCw2REFBNkQ7QUFDN0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsRUFBRTtJQUNuRSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNmLFVBQVUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzFCLGdEQUFnRDtRQUNoRCxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsWUFBWSxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icm93c2VyLWV4dGVuc2lvbi8uL3NyYy9jb250ZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGJsdXJGaWx0ZXIgPSBcImJsdXIoNnB4KVwiXG5sZXQgdGV4dFRvQmx1ciA9IFwiXCJcblxuLy8gU2VhcmNoIHRoaXMgRE9NIG5vZGUgZm9yIHRleHQgdG8gYmx1ciBhbmQgYmx1ciB0aGUgcGFyZW50IGVsZW1lbnQgaWYgZm91bmQuXG5mdW5jdGlvbiBwcm9jZXNzTm9kZShub2RlOiBOb2RlKSB7XG4gICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIEFycmF5LmZyb20obm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKHByb2Nlc3NOb2RlKVxuICAgIH1cbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgJiZcbiAgICAgICAgbm9kZS50ZXh0Q29udGVudCAhPT0gbnVsbCAmJiBub2RlLnRleHRDb250ZW50LnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50RWxlbWVudFxuICAgICAgICBpZiAocGFyZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KTtcbiAgICAgICAgaWYgKHBhcmVudC50YWdOYW1lID09PSAnU0NSSVBUJyB8fCBwYXJlbnQuc3R5bGUuZmlsdGVyID09PSBibHVyRmlsdGVyKSB7XG4gICAgICAgICAgICAvLyBBbHJlYWR5IGJsdXJyZWRcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLnRleHRDb250ZW50LmluY2x1ZGVzKHRleHRUb0JsdXIpKSB7XG4gICAgICAgICAgICBibHVyRWxlbWVudChwYXJlbnQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJsdXJFbGVtZW50KGVsZW06IEhUTUxFbGVtZW50KSB7XG4gICAgZWxlbS5zdHlsZS5maWx0ZXIgPSBibHVyRmlsdGVyXG4gICAgY29uc29sZS5kZWJ1ZyhcImJsdXJyZWQgaWQ6XCIgKyBlbGVtLmlkICsgXCIgY2xhc3M6XCIgKyBlbGVtLmNsYXNzTmFtZSArXG4gICAgICAgIFwiIHRhZzpcIiArIGVsZW0udGFnTmFtZSArIFwiIHRleHQ6XCIgKyBlbGVtLnRleHRDb250ZW50KVxufVxuXG4vLyBDcmVhdGUgYSBNdXRhdGlvbk9ic2VydmVyIHRvIHdhdGNoIGZvciBjaGFuZ2VzIHRvIHRoZSBET00uXG5jb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICBtdXRhdGlvbnMuZm9yRWFjaCgobXV0YXRpb24pID0+IHtcbiAgICAgICAgaWYgKG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbXV0YXRpb24uYWRkZWROb2Rlcy5mb3JFYWNoKHByb2Nlc3NOb2RlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc05vZGUobXV0YXRpb24udGFyZ2V0KVxuICAgICAgICB9XG4gICAgfSlcbn0pXG5cblxuZnVuY3Rpb24gb2JzZXJ2ZSgpe1xuICAgIC8vIE9ubHkgc3RhcnQgb2JzZXJ2aW5nIHRoZSBET00gaWYgdGhlIGV4dGVuc2lvbiBpcyBlbmFibGVkIGFuZCB0aGVyZSBpcyB0ZXh0IHRvIGJsdXIuXG4gICAgaWYgKHRleHRUb0JsdXIudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICAgICAgYXR0cmlidXRlczogZmFsc2UsXG4gICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgfSlcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBlbGVtZW50cyBvbiB0aGUgcGFnZSBmb3IgaW5pdGlhbCBwcm9jZXNzaW5nLlxuICAgICAgICBwcm9jZXNzTm9kZShkb2N1bWVudClcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG59XG5cbmNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KFwiaXRlbVwiLCAoZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhLml0ZW0pIHtcbiAgICAgICAgdGV4dFRvQmx1ciA9IGRhdGEuaXRlbTtcbiAgICB9XG4gICAgb2JzZXJ2ZSgpO1xufSk7XG5cbi8vIExpc3RlbiBmb3IgbWVzc2FnZXMgZnJvbSBwb3B1cCB0byB1cGRhdGUgdGhlIHRleHQgdG8gYmx1ci5cbmNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigocmVxdWVzdCwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpID0+IHtcbiAgICBpZiAocmVxdWVzdC5pdGVtKSB7XG4gICAgICAgIHRleHRUb0JsdXIgPSByZXF1ZXN0Lml0ZW07XG4gICAgICAgIC8vIFJlLXByb2Nlc3MgdGhlIERPTSB3aXRoIHRoZSBuZXcgdGV4dCB0byBibHVyLlxuICAgICAgICBwcm9jZXNzTm9kZShkb2N1bWVudCk7XG4gICAgICAgIHNlbmRSZXNwb25zZSh7IHRpdGxlOiBkb2N1bWVudC50aXRsZSwgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZiB9KTtcbiAgICB9XG59KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==