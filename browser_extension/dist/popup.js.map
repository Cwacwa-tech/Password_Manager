{"version":3,"file":"popup.js","mappings":"uFAAA,wBAA6BA,GACzB,MAAMC,EAAOD,EAAU,KAAO,MACzBE,OAAOC,OAAOC,aAAa,CAACH,KAAMA,GAC3C,C,GCFII,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,C,OCnBA,EAHA,OAGAN,eAAa,GAGb,MAAMS,EAAyBC,SAASC,eAAe,qBACjDC,EAAkBF,SAASC,eAAe,oBAC1CE,EAAyBH,SAASC,eAAe,sBAGnDF,GAA0BG,GAAmBC,EAC7CJ,EAAuBK,iBAAiB,SAAS,KAE7ChB,OAAOiB,QAAQC,YACX,CAAEjB,OAAQ,sBACTkB,KACOA,aAAQ,EAARA,EAAUC,UACVL,EAAuBM,MAAQF,EAASC,UACjCD,aAAQ,EAARA,EAAUG,SACjBR,EAAgBS,YAAc,+BAClC,GAEP,IAGLC,QAAQF,MAAM,2FAIlBV,SAASI,iBAAiB,oBAAoB,KAC1C,MAAMS,EAAcb,SAASC,eAAe,gBACtCa,EAAad,SAASC,eAAe,SACrCc,EAAsBf,SAASC,eAAe,mBAEhDY,GAAeC,GAAcC,EAC7BF,EAAYT,iBAAiB,SAAS,KAClC,MAAMY,EAAQF,EAAWL,MAAMQ,OACzBC,EAAiBH,EAAoBN,MAAMQ,OAE5CD,GAAUE,GAKfN,QAAQO,IAAI,4BAGZ/B,OAAOiB,QAAQC,YACX,CAAEjB,OAAQ,QAAS2B,QAAOE,mBACzBX,KACOA,aAAQ,EAARA,EAAUa,SACVR,QAAQO,IAAI,oBAAqBZ,GAEjCK,QAAQF,MAAM,gBAAiBH,aAAQ,EAARA,EAAUG,MAC7C,KAdJE,QAAQF,MAAM,sCAgBjB,IAGLE,QAAQF,MAAM,0CAClB,G","sources":["webpack://browser-extension/./src/common.ts","webpack://browser-extension/webpack/bootstrap","webpack://browser-extension/./src/popup.ts"],"sourcesContent":["export function setBadgeText(enabled: boolean) {\n    const text = enabled ? \"ON\" : \"OFF\"\n    void chrome.action.setBadgeText({text: text})\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { setBadgeText } from \"./common\";\n\n// Set the extension to always be enabled\nsetBadgeText(true); // Set badge to \"ON\"\n\n// Generate password button logic\nconst generatePasswordButton = document.getElementById(\"generate-password\");\nconst passwordDisplay = document.getElementById(\"password-display\");\nconst generatedPasswordInput = document.getElementById(\"generated-password\") as HTMLInputElement;\n\n// Check if elements exist before using them\nif (generatePasswordButton && passwordDisplay && generatedPasswordInput) {\n    generatePasswordButton.addEventListener(\"click\", () => {\n        // Send message to background to generate a password\n        chrome.runtime.sendMessage(\n            { action: \"generate_password\" },\n            (response) => {\n                if (response?.password) {\n                    generatedPasswordInput.value = response.password; // Autofill the input field\n                } else if (response?.error) {\n                    passwordDisplay.textContent = \"Failed to generate password.\";\n                }\n            }\n        );\n    });\n} else {\n    console.error(\"Elements not found: generatePasswordButton, passwordDisplay, or generatedPasswordInput.\");\n}\n\n// Login form logic\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const loginButton = document.getElementById(\"login-button\");\n    const emailInput = document.getElementById(\"email\") as HTMLInputElement | null;\n    const masterPasswordInput = document.getElementById(\"master-password\") as HTMLInputElement | null;\n\n    if (loginButton && emailInput && masterPasswordInput) {\n        loginButton.addEventListener(\"click\", () => {\n            const email = emailInput.value.trim();\n            const masterPassword = masterPasswordInput.value.trim();\n\n            if (!email || !masterPassword) {\n                console.error(\"Email and password cannot be empty.\");\n                return;\n            }\n\n            console.log(\"Sending login request...\");\n\n            // Send login request to background script\n            chrome.runtime.sendMessage(\n                { action: \"login\", email, masterPassword },\n                (response) => {\n                    if (response?.success) {\n                        console.log(\"Login successful:\", response);\n                    } else {\n                        console.error(\"Login failed:\", response?.error);\n                    }\n                }\n            );\n        });\n    } else {\n        console.error(\"Login button or input fields not found.\");\n    }\n});\n"],"names":["enabled","text","chrome","action","setBadgeText","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","generatePasswordButton","document","getElementById","passwordDisplay","generatedPasswordInput","addEventListener","runtime","sendMessage","response","password","value","error","textContent","console","loginButton","emailInput","masterPasswordInput","email","trim","masterPassword","log","success"],"sourceRoot":""}