{"version":3,"file":"popup.js","mappings":"uFAAA,wBAA6BA,GACzB,MAAMC,EAAOD,EAAU,KAAO,MACzBE,OAAOC,OAAOC,aAAa,CAACH,KAAMA,GAC3C,EAGA,6BAAkCI,EAAyBC,G,MAEvD,GAAID,EAAME,UAAYF,EAAMG,SAAU,OAEtC,MAAMC,EAAoG,QAA3E,EAAAC,OAAOC,yBAAyBC,OAAOC,iBAAiBC,UAAW,gBAAQ,eAAEC,IACxGN,EACAA,EAAuBO,KAAKX,EAAOC,GAGnCD,EAAMC,MAAQA,EAIH,CAAC,QAAS,SAAU,UAAW,SAEvCW,SAAQC,IACX,IAAIC,EAGAA,EAFc,YAAdD,GAAyC,UAAdA,EAEnB,IAAIE,cAAcF,EAAW,CACjCG,SAAS,EACTC,YAAY,EACZC,IAAK,MAID,IAAIC,MAAMN,EAAW,CAAEG,SAAS,IAE5ChB,EAAMoB,cAAcN,EAAM,IAI9Bd,EAAMqB,QACNC,YAAW,KACPtB,EAAMuB,MAAM,GACb,IACP,C,GCzCIC,EAA2B,CAAC,GCEhC,EDCA,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCtBA,MAGA9B,eAAa,GAGbiC,SAASC,iBAAiB,oBAAoB,KAC1C,MAAMC,EAAcF,SAASG,eAAe,gBACtCC,EAAaJ,SAASG,eAAe,SACrCE,EAAsBL,SAASG,eAAe,mBAEhDD,GAAeE,GAAcC,EAC7BH,EAAYD,iBAAiB,SAAS,KAClC,MAAMK,EAAQF,EAAWnC,MAAMsC,OACzBC,EAAiBH,EAAoBpC,MAAMsC,OAE5CD,GAAUE,GAKfC,QAAQC,IAAI,4BAGZ7C,OAAO8C,QAAQC,YACX,CAAE9C,OAAQ,QAASwC,QAAOE,mBACzBK,KACOA,aAAQ,EAARA,EAAUC,SACVL,QAAQC,IAAI,oBAAqBG,GAEjCJ,QAAQM,MAAM,gBAAiBF,aAAQ,EAARA,EAAUE,MAC7C,KAdJN,QAAQM,MAAM,sCAgBjB,IAGLN,QAAQM,MAAM,0CAClB,G","sources":["webpack://browser-extension/./src/common.ts","webpack://browser-extension/webpack/bootstrap","webpack://browser-extension/./src/popup.ts"],"sourcesContent":["export function setBadgeText(enabled: boolean) {\n    const text = enabled ? \"ON\" : \"OFF\"\n    void chrome.action.setBadgeText({text: text})\n}\n\n// Function to simulate user input, ensuring frameworks (React, Vue) detect changes\nexport function simulateUserInput(input: HTMLInputElement, value: string) {\n    // Skip if input is disabled or readonly\n    if (input.disabled || input.readOnly) return;\n    \n    const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, \"value\")?.set;\n    if (nativeInputValueSetter) {\n        nativeInputValueSetter.call(input, value); // Set input value programmatically\n    } else {\n        // Fallback if the setter is not available\n        input.value = value;\n    }\n\n    // Dispatch multiple events for maximum compatibility with different frameworks\n    const events = ['input', 'change', 'keydown', 'keyup'];\n    \n    events.forEach(eventType => {\n        let event;\n        if (eventType === 'keydown' || eventType === 'keyup') {\n            // For key events, create a KeyboardEvent\n            event = new KeyboardEvent(eventType, {\n                bubbles: true,\n                cancelable: true,\n                key: 'L' // First letter of \"LOVE\"\n            });\n        } else {\n            // For other events, use regular Event\n            event = new Event(eventType, { bubbles: true });\n        }\n        input.dispatchEvent(event);\n    });\n    \n    // Some frameworks might use focus/blur events as well\n    input.focus();\n    setTimeout(() => {\n        input.blur();\n    }, 100);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { setBadgeText } from \"./common\";\n\n// Set the extension to always be enabled\nsetBadgeText(true); // Set badge to \"ON\"\n\n// Login form logic\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const loginButton = document.getElementById(\"login-button\");\n    const emailInput = document.getElementById(\"email\") as HTMLInputElement | null;\n    const masterPasswordInput = document.getElementById(\"master-password\") as HTMLInputElement | null;\n\n    if (loginButton && emailInput && masterPasswordInput) {\n        loginButton.addEventListener(\"click\", () => {\n            const email = emailInput.value.trim();\n            const masterPassword = masterPasswordInput.value.trim();\n\n            if (!email || !masterPassword) {\n                console.error(\"Email and password cannot be empty.\");\n                return;\n            }\n\n            console.log(\"Sending login request...\");\n\n            // Send login request to background script\n            chrome.runtime.sendMessage(\n                { action: \"login\", email, masterPassword },\n                (response) => {\n                    if (response?.success) {\n                        console.log(\"Login successful:\", response);\n                    } else {\n                        console.error(\"Login failed:\", response?.error);\n                    }\n                }\n            );\n        });\n    } else {\n        console.error(\"Login button or input fields not found.\");\n    }\n});\n"],"names":["enabled","text","chrome","action","setBadgeText","input","value","disabled","readOnly","nativeInputValueSetter","Object","getOwnPropertyDescriptor","window","HTMLInputElement","prototype","set","call","forEach","eventType","event","KeyboardEvent","bubbles","cancelable","key","Event","dispatchEvent","focus","setTimeout","blur","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","document","addEventListener","loginButton","getElementById","emailInput","masterPasswordInput","email","trim","masterPassword","console","log","runtime","sendMessage","response","success","error"],"sourceRoot":""}