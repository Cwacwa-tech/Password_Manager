"""Adding sync features to DB

Revision ID: f6d70f017f7e
Revises: dce874217ca3
Create Date: 2025-03-06 14:09:52.044773

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f6d70f017f7e'
down_revision: Union[str, None] = 'dce874217ca3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('recovery_codes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_email', sa.String(), nullable=False),
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_email'], ['users.email'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_email', 'code', name='uq_user_recovery_code')
    )
    op.create_index(op.f('ix_recovery_codes_code'), 'recovery_codes', ['code'], unique=False)
    op.create_table('sync_metadata',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_email', sa.String(), nullable=False),
    sa.Column('device_id', sa.String(), nullable=False),
    sa.Column('last_sync', sa.DateTime(), nullable=True),
    sa.Column('sync_token', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_email'], ['users.email'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sync_metadata_id'), 'sync_metadata', ['id'], unique=False)
    op.create_table('user_devices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_email', sa.String(), nullable=False),
    sa.Column('device_id', sa.String(), nullable=True),
    sa.Column('device_name', sa.String(length=255), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('operating_system', sa.String(length=100), nullable=True),
    sa.Column('browser', sa.String(length=100), nullable=True),
    sa.Column('browser_version', sa.String(length=50), nullable=True),
    sa.Column('device_fingerprint', sa.String(length=512), nullable=True),
    sa.Column('last_ip_address', postgresql.INET(), nullable=True),
    sa.Column('last_location', sa.String(length=255), nullable=True),
    sa.Column('is_trusted', sa.Boolean(), nullable=True),
    sa.Column('is_current', sa.Boolean(), nullable=True),
    sa.Column('first_seen_at', sa.DateTime(), nullable=False),
    sa.Column('last_seen_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_email'], ['users.email'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_email', 'device_id', name='uq_user_device')
    )
    op.create_index(op.f('ix_user_devices_device_id'), 'user_devices', ['device_id'], unique=True)
    op.create_table('login_attempts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_email', sa.String(), nullable=True),
    sa.Column('device_id', sa.UUID(), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('method', sa.String(), nullable=False),
    sa.Column('attempted_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('failure_reason', sa.String(length=255), nullable=True),
    sa.Column('location_info', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['user_devices.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_email'], ['users.email'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_login_attempts_email'), 'login_attempts', ['email'], unique=False)
    op.add_column('users', sa.Column('key_derivation_salt', sa.LargeBinary(), nullable=False))
    op.add_column('users', sa.Column('encryption_key', sa.LargeBinary(), nullable=False))
    op.add_column('users', sa.Column('is_totp_enabled', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_locked', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('locked_until', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('users', sa.Column('last_login', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('password_updated_at', sa.DateTime(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'password_updated_at')
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'locked_until')
    op.drop_column('users', 'is_locked')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'is_totp_enabled')
    op.drop_column('users', 'encryption_key')
    op.drop_column('users', 'key_derivation_salt')
    op.drop_index(op.f('ix_login_attempts_email'), table_name='login_attempts')
    op.drop_table('login_attempts')
    op.drop_index(op.f('ix_user_devices_device_id'), table_name='user_devices')
    op.drop_table('user_devices')
    op.drop_index(op.f('ix_sync_metadata_id'), table_name='sync_metadata')
    op.drop_table('sync_metadata')
    op.drop_index(op.f('ix_recovery_codes_code'), table_name='recovery_codes')
    op.drop_table('recovery_codes')
    # ### end Alembic commands ###
